using System;
using System.Windows.Forms;

namespace 模板.Helper
{
    public static class DateTimeHelper
    {
        /// <summary>
        /// 日期str(不限民國/西元) => DateTime
        /// </summary>
        /// <param name="date">民國/西元日期</param>
        /// <returns>DateTime</returns>
        public static DateTime ToDate(this string date)
        {
            date.ValidDate();
            try
            {
                date = date.Replace("/", null).Trim();

                //民國年先轉西元年
                if (date.Length == 7)
                {
                    date = date.ToWestDateStr();
                }

                int year = int.Parse(date.Substring(0, 4));
                int month = int.Parse(date.Substring(4, 2));
                int day = int.Parse(date.Substring(6, 2));
                return new DateTime(year, month, day);
            }
            catch (Exception ex)
            {
                throw new Exception(ErrorMessage.TransDateTimeErrorTitle, ex);
            }

        }

        /// <summary>
        /// 時間str => DateTime 
        /// </summary>
        /// <param name="date">時間str</param>
        /// <returns>DateTime</returns>
        public static DateTime ToTime(this string time)
        {
            if (string.IsNullOrWhiteSpace(time))
            {
                throw new ArgumentNullException(ErrorMessage.TimeIsNull);
            }

            time = time.Replace(":", null).Trim().PadRight(6, '0');

            if (time.Length != 6)
            {
                throw new ArgumentOutOfRangeException(ErrorMessage.WrongTimeForm);
            }
           
            return DateTime.ParseExact(time, "HHmmss", null, System.Globalization.DateTimeStyles.None);

        }


        /// <summary>
        /// DateTime => 民國日期Str(YYYmmDD)
        /// </summary>
        /// <param name="originalDate">待轉換之日期</param>
        /// <returns>民國日期Str(YYYmmDD)</returns>
        public static string ToTwDateStr(this DateTime date, bool addSlash = false)
        {
            try
            {
                int yearNum = date.Year - 1911;
                string MMdd = date.Month.ToString("00") + date.Day.ToString("00");
                string result = string.Empty;

                if (yearNum <= 0)
                {
                    result = $"{yearNum - 1:D2}" + MMdd;  //沒有民國0年，只有元年或-1年，所以民國前的年份要再-1
                }
                else if (yearNum > 999)
                {
                    result = "9991231";
                }
                else
                {
                    result = yearNum.ToString("000") + MMdd;
                }
                string year = result.Substring(0, 3);
                string month = result.Substring(3, 2);
                string day = result.Substring(5, 2);
                return addSlash ? year + "/" + month + "/" + day : year + month + day;
            }
            catch (Exception ex)
            {
                throw new Exception(ErrorMessage.TransDateTimeErrorTitle, ex);
            }

        }

        /// <summary>
        /// DateTime => 時間str(HH:MI:SS)
        /// </summary>
        /// <param name="time">DateTime</param>
        /// <returns>時間str(HH:MI:SS)</returns>
        public static string ToTimeStr(this DateTime time, bool addColon = false)
        {
            try
            {
                string hour = time.Hour.ToString("00");
                string min = time.Minute.ToString("00");
                string sec = time.Second.ToString("00");
                return addColon ? hour + ":" + min + ":" + sec : hour + min + sec;
            }
            catch (Exception ex)
            {
                throw new Exception(ErrorMessage.TransDateTimeErrorTitle, ex);
            }
        }

        /// <summary>
        /// 日期str => 西元日期str(yyyyMMdd)
        /// </summary>
        /// <param name="date">日期str</param>
        /// <param name="addSlash">日期是否包含'/'</param>
        /// <returns>yyyyMMdd or yyyy/MM/dd</returns>
        public static string ToWestDateStr(this string date, bool addSlash = false)
        {
            date.ValidDate();

            try
            {
                date = date.Replace("/", null).Trim();
                string MMdd = date.Substring(3, 4);
                if (date.Length == 7)
                {
                    int yearNum = int.Parse(date.Substring(0, 3)) + 1911;
                    if (yearNum < 1911) yearNum++; //民國前的年份會多-1，轉換時要加回來

                    date = yearNum.ToString("0000") + MMdd;
                }
                string year = date.Substring(0, 4);
                string month = date.Substring(4, 2);
                string day = date.Substring(6, 2);

                return addSlash ? year + "/" + month + "/" + day : year + month + day;
            }
            catch (Exception ex)
            {
                throw new Exception(ErrorMessage.TransDateTimeErrorTitle, ex);
            }

        }

        #region -- 【轉換】 --
        /// <summary>
        /// 日期str => 民國日期(yyyMMdd)
        /// </summary>
        /// <param name="date">待轉換之日期</param>
        /// <param name="addSlash">是否加入"/"</param>
        /// <returns>yyyMMdd or yyy/MM/dd</returns>
        public static string ToTwDateStr(this string date, bool addSlash = false)
        {
            date.ValidDate();
            try
            {
                date = date.Replace("/", null).Trim();
                if (date.Length == 8)
                {
                    int yearNum = int.Parse(date.Substring(0, 4)) - 1911;
                    string MMdd = date.Substring(4, 4);

                    if (yearNum <= 0)
                    {
                        date = $"{yearNum - 1:D2}" + MMdd;  //沒有民國0年，只有元年或-1年，所以民國前的年份要再-1
                    }
                    else if (yearNum >= 999)
                    {
                        date = "9991231";
                    }
                    else
                    {
                        date = yearNum.ToString("000") + MMdd;
                    }
                }

                string year = date.Substring(0, 3);
                string month = date.Substring(3, 2);
                string day = date.Substring(5, 2);

                return addSlash ? year + "/" + month + "/" + day : year + month + day;
            }
            catch (Exception ex)
            {
                throw new Exception(ErrorMessage.TransDateTimeErrorTitle, ex);
            }
        }
        #endregion

        /// <summary>
        /// 驗證input是否為有效日期
        /// </summary>
        /// <param name="date">input date</param>
        /// <param name="isDate">驗證結果</param>
        public static void ValidDate(this string date)
        {
            if (string.IsNullOrWhiteSpace(date))
            {
                throw new ArgumentNullException(ErrorMessage.DateIsNull);
            }
            date = date.Replace("/", null).Trim();
            switch (date.Length)
            {
                case 7:
                    int yearNum = int.Parse(date.Substring(0, 3)) + 1911;
                    if (yearNum < 1911) yearNum++; //民國前的年份會多-1，轉換時要加回來
                    date = yearNum.ToString() + date.Substring(3, 4);
                    goto case 8;
                case 8:
                    if (!DateTime.TryParseExact(date, "yyyyMMdd", null, System.Globalization.DateTimeStyles.None, out DateTime result))
                    {
                        throw new FormatException(ErrorMessage.WrongDateForm);
                    }
                    break;
                default:
                    throw new ArgumentOutOfRangeException(ErrorMessage.WrongDateLength);

            }
        }

        public static DateTime ToDayMinTime(this DateTime dt)
        {
            return new DateTime(dt.Year, dt.Month, dt.Day, 0, 0, 0);
        }

        public static DateTime ToDayMaxTime(this DateTime dt)
        {
            return new DateTime(dt.Year, dt.Month, dt.Day, 23, 59, 59);
        }

        /// <summary>
        /// DateTimeHelper錯誤訊息
        /// </summary>
        class ErrorMessage
        {
            internal const string WrongDateForm = "日期格式錯誤！請確認是否含有非數字內容，或非正常日期";

            internal const string WrongTimeForm = "時間格式錯誤！請確認是否含有非數字內容，或非正常時間";

            internal const string WrongDateLength = "日期長度錯誤！\n\n請確認日期長度為：\n7碼-民國日期(年年年月月日日)\n or \n8碼-西元日期(年年年年月月日日)";

            internal const string DateIsNull = "警告：日期為空值";

            internal const string TimeIsNull = "警告：時間為空值";

            internal const string TransDateTimeErrorTitle = "DateTime轉換失敗！";

            internal const string ValidDateTimeErrorTitle = "日期驗證失敗！";
        }
    }
}
